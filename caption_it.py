# -*- coding: utf-8 -*-
"""caption_it.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CYhfbtD_faBL98BbKX0BA5eUWzpwR1-b
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

import keras
import pickle
from time import time

import json

from keras.applications.vgg16 import VGG16
from keras.applications.resnet50 import ResNet50,preprocess_input,decode_predictions
from keras.preprocessing import image

from keras.models import Model,load_model

from keras.preprocessing.sequence import pad_sequences
from keras.utils import to_categorical

from keras.layers import Input,Dense,Dropout,Embedding,LSTM
from keras.layers.merge import add

model = load_model("model_weights/model_9.h5")

model_temp = ResNet50(weights="imagenet",input_shape=(224,224,3))

model_resnet = Model(model_temp.input,model.layers[-2].output)

def preprocess_img(img):
  img = image.load_img(img,target_size=(224,224))
  img = image.img_to_array(img)
  img = np.expand_dims(img,axis=0)

  # Normalisation
  img = preprocess_input(img)
  return img

def encode_image(img):
   img = preprocess_img(img)
   feature_vector = model_new.predict(img)
   feature_vector = feature_vector.reshape((2048,))
   return feature_vector

with open("storage/word2idx.pkl","rb") as w2i:
  word2idx = pickle.load(w2i)

with open("storage/idx2word.pkl","rb") as i2w:
  idx2word = pickle.load(i2w)

def predict_captions(photo):
  in_text = "startseq"
  max_len=35
  for i in range(max_len):
    sequence = [word2idx[w] for w in in_text.split() if w in word2idx]
    sequence = pad_sequences([sequence],maxlen=max_len,padding='post')

    ypred = model_f.predict([photo,sequence])
    ypred = ypred.argmax() # index of word with max probability

    word = idx2word[ypred]
    
    in_text += (' '+word)

    if word == 'endseq':
      break

  final_caption = in_text.split()[1:-1]
  final_caption = ' '.join(final_caption)

  return final_caption


def caption_this_image(image):
	enc = encode_image(image)

	caption = predict_captions(enc)

	return caption